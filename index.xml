<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on Kubernetes 学习笔记</title>
    <link>https://ikingye.github.io/study-kubernetes/</link>
    <description>Recent content in 首页 on Kubernetes 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>api-server</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/arch/component/api-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/arch/component/api-server/</guid>
      <description>api-server 基础 #  </description>
    </item>
    
    <item>
      <title>K8s 端口</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/arch/network/port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/arch/network/port/</guid>
      <description>K8s 端口 #   service 的端口  port：负责处理对内的通信，  访问方式：clusterIP:port 或者 externalIP:port  externalIP 不归 kubernetes 管，cluster administrator 自己负责     nodePort：在 node 上，负责对外通信  访问方式：NodeIP:NodePort     pod 的端口  targetPort：在 pod 上  从 port 和 nodePort 上来的流量，经过 kube-proxy 流入到后端 pod 的 targetPort 上，最后进入容器     容器的端口  containerPort：在容器上，用于被 pod 绑定   主机的端口  hostPort：容器暴露的端口映射到的主机端口  尽量不要为 Pod 指定 hostPort 将 Pod 绑定到 hostPort 时，它会限制 Pod 可以调度的位置数，因为每个 &amp;lt;hostIP, hostPort, protocol&amp;gt; 组合必须是唯一的 如果您没有明确指定 hostIP 和 protocol，Kubernetes 将使用 0.</description>
    </item>
    
    <item>
      <title>Pod</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/pod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/pod/</guid>
      <description>Pod #  Infra 容器 #  使用镜像：k8s.gcr.io/pause
这个镜像是一个用汇编语言编写的、永远处于 “暂停” 状态的容器，解压后的大小也只有 100~200 KB 左右。
Init 容器 #  以 Init: 开始的 Pod 状态概括表示 Init 容器的执行状态。
下表展示了在调试 Init 容器时可能见到的状态值。
   状态 含义     Init:N/M Pod 中有 M 个 Init 容器，其中 M 已经完成   Init:Error Init 容器执行错误   Init:CrashLoopBackOff Init 容器已经失败多次   Pending Pod 还没有开始执行 Init 容器   PodInitializing or Running Pod 已经完成执行 Init 容器    Pod phase（运行阶段） #  Pod 的 status 定义在 PodStatus 对象中，其中有一个 Phase（运行阶段） 字段。</description>
    </item>
    
    <item>
      <title>replicaset</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/replicaset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/replicaset/</guid>
      <description>replicaset #  问答 #  为什么要有 replicaset ？ #  </description>
    </item>
    
    <item>
      <title>ConfigMap</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/configmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/configmap/</guid>
      <description>ConfigMap 基础 #  ConfigMap 在运行时会将配置文件、命令行参数、环境变量、端口号以及其他配置工件绑定到 Pod 的容器和系统组件。借助 ConfigMap，您可以将配置与 Pod 和组件分开，这有助于保持工作负载的可移植性，使其配置更易于更改和管理，并防止将配置数据硬编码到 Pod 规范。
ConfigMap 可用于存储和共享非敏感、未加密的配置信息。要在集群中使用敏感信息，您必须使用 Secret。
创建 ConfigMap #  使用以下命令创建 ConfigMap：
kubectl create configmap [NAME] [DATA]
[DATA] 可以是： 包含一个或多个配置文件的目录的路径，使用 &amp;ndash;from-file 标志指示 键值对，每个键值对都使用 &amp;ndash;from-literal 标志指定 如需详细了解 kubectl create，请参阅参考文档。
您还可以通过在 YAML 清单文件中定义 ConfigMap 对象并使用 kubectl create -f [FILE] 部署对象来创建 ConfigMap。
使用 ConfigMap #  apiVersion: v1 kind: Pod metadata: name: dapi-test-pod spec: containers: - name: test-container image: k8s.gcr.io/busybox command: [ &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)&amp;#34; ] env: - name: SPECIAL_LEVEL_KEY valueFrom: configMapKeyRef: name: special-config key: SPECIAL_LEVEL - name: SPECIAL_TYPE_KEY valueFrom: configMapKeyRef: name: special-config key: SPECIAL_TYPE restartPolicy: Never </description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/deployment/</guid>
      <description>Deployment #  故障排查 #  下载 pdf 版本
参考：
 A visual guide on troubleshooting Kubernetes deployments  Kubernetes Deployment 故障排查常见方法     问答 #  为什么要有 Deployment #  </description>
    </item>
    
    <item>
      <title>Kubectl</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/quick/tool/kubectl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/quick/tool/kubectl/</guid>
      <description>Kubectl #  集群信息查询 #   kubectl cluster-info  node #   kubectl get nodes kubectl describe node   常用操作 #  获取 service ip, port #  kubectl get service/servicename -o jsonpath=&#39;{.spec.clusterIP}:{.spec.ports[*].port}&#39;  kubectl get 结果排序 #  --sort-by= ##### pod # name kubectl --sort-by=.metadata.name get pod # status kubectl --sort-by=.status.phase get pod # restarts kubectl --sort-by=.status.containerStatuses[0].restartCount get pod # age kubectl --sort-by=.status.startTime get pod # ip kubectl --sort-by=.</description>
    </item>
    
    <item>
      <title>CRD</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/crd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/crd/</guid>
      <description>CRD #  如何实现一个 CRD ？ #   关注 #  GoogleCloudPlatform/metacontroller #  Metacontroller is an add-on for Kubernetes that makes it easy to write and deploy custom controllers in the form of simple scripts.
This is not an officially supported Google product. Although this open-source project was started by GKE, the add-on works the same in any Kubernetes cluster.</description>
    </item>
    
    <item>
      <title>Kubeadm</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/quick/install/kubeadm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/quick/install/kubeadm/</guid>
      <description>Kubeadm #  教程 #  Getting Started With Kubeadm #  from katacoda
参考 #  https://www.katacoda.com #  Katacoda - Interactive Learning Platform for Software Engineers</description>
    </item>
    
    <item>
      <title>Kustomize</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/quick/tool/kustomize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/quick/tool/kustomize/</guid>
      <description>Kustomize #  Kustomize Customization of kubernetes YAML configurations
kustomize lets you customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is.</description>
    </item>
    
    <item>
      <title>MicroK8s</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/quick/install/microk8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/quick/install/microk8s/</guid>
      <description>MicroK8s #  MicroK8s is a small, fast, single-package Kubernetes for developers, IoT and edge.
Pros: #   Very easy to install, upgrade, remove Completely isolated from other tools in your machine Does not need a VM, all services run locally  Cons: #   Only available for Snap supported Linux Distributions Relatively new, possible unstable Minikube can also run directly on Linux (vmdriver=none), so MicroK8s value proposition is diminished   参考 #   Local Kubernetes for Linux – MiniKube vs MicroK8s  </description>
    </item>
    
    <item>
      <title>Kube-proxy</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/arch/component/kube-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/arch/component/kube-proxy/</guid>
      <description>Kube-proxy 基础 #  </description>
    </item>
    
    <item>
      <title>故障排查</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/arch/network/troubleshoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/arch/network/troubleshoot/</guid>
      <description>Kubernetes 网络故障排查 #  </description>
    </item>
    
    <item>
      <title>4.1 教程</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/appendix/tutorial/</guid>
      <description>Kubernetes 教程 #  基础 #  collabnix/dockerlabs #  Docker - Beginners | Intermediate | Advanced https://dockerlabs.collabnix.com
To get started with Kubernetes, follow the below steps:
Open https://labs.play-with-kubernetes.com on your browser Click on Add Instances to setup first k8s node cluster
feiskyer/kubernetes-handbook #  Kubernetes Handbook （Kubernetes 指南） https://kubernetes.feisky.xyz
play-with-docker/play-with-docker #  Play With Docker gives you the experience of having a free Alpine Linux Virtual Machine in the cloud where you can build and run Docker containers and even create clusters with Docker features like Swarm Mode.</description>
    </item>
    
    <item>
      <title>CoreDNS</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/arch/network/dns/coredns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/arch/network/dns/coredns/</guid>
      <description>CoreDNS #  coredns/coredns </description>
    </item>
    
    <item>
      <title>MiniKube</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/quick/install/minikube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/quick/install/minikube/</guid>
      <description>MiniKube #  安装 #  MacOS 1. Install kubectl  2. Install a Hypervisor  HyperKit VirtualBox VMware Fusion   3. Install Minikube Homebrew brew install minikube
curl curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 \ &amp;amp;&amp;amp; chmod +x minikube sudo mv minikube /usr/local/bin Linux Windows  参考：https://kubernetes.io/docs/tasks/tools/install-minikube/
启动 #    minikube start --registry-mirror=https://registry.docker-cn.com --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers
  minikube start --cpus=2 --disk-size=&#39;10g&#39; --image-mirror-country=&#39;cn&#39; --image-repository=&#39;registry.cn-hangzhou.aliyuncs.com/google_containers&#39;
  minikube start --image-mirror-country=&#39;cn&#39; --registry-mirror=https://registry.docker-cn.com   </description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/service/</guid>
      <description>Service #  type #  ClusterIP #   通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问 这也是默认的 ServiceType  NodePort #   通过每个 Node 上的 IP 和静态端口（NodePort）暴露服务 NodePort 服务会路由到 ClusterIP 服务，这个 ClusterIP 服务会自动创建 通过请求 &amp;lt;NodeIP&amp;gt;:&amp;lt;NodePort&amp;gt;，可以从集群的外部访问一个 NodePort 服务  LoadBalancer #   使用云提供商的负载局衡器，可以向外部暴露服务 外部的负载均衡器可以路由到 NodePort 服务和 ClusterIP 服务  访问方式 #   内部：ClusterIP:port (10.110.126.136:80) 外部：  hostIP:nodePort (机器 IP:30032) EXTERNAL-IP:port (xxxx:80)    # 没有 EXTERNAL-IP NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR istio-ingressgateway LoadBalancer 10.</description>
    </item>
    
    <item>
      <title>版本</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/other/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/other/version/</guid>
      <description>Kubernetes 版本 #  查看版本 #  kuberctl #   kuberctl version  这里 Client Version 的 GitVersion 是 kuberctl 的版本：
apiserver #   kuberctl version  这里 Server Version 的 GitVersion 是 apiserver 的版本：
kubelet #   kuberctl get nodes  这里的 VERSION 是 kubelet 的版本：
 历史版本 #  v1.20 #  v1.19 #   v1.18 #  v1.18.6 #   v1.17 #   v1.</description>
    </item>
    
    <item>
      <title>故障排查</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/other/practice/troubleshoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/other/practice/troubleshoot/</guid>
      <description>Kubernetes 故障排查 #  参考：
 监控、日志和排错  </description>
    </item>
    
    <item>
      <title>4.2 面试题</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/appendix/interview/</guid>
      <description>面试题 #  基础 #  进阶 #   其他 #  头条面试题 #  头条人选一（最近一周刚面试，面试岗位是头条杭州的 docker、k8s 工程师） 1.解释一下 acid 2.数据库的隔离级别 3.每个隔离级别的实现原理 4.讲一下分布式事务现有的方案，优缺点 5.说一下 cgroup 原理 6.说一下 mesos，k8s 的架构 7.说一下 actor 编程模型的原理和意义 算法：输出所有出现次数大于 n/k 的数,如果没有这样的数,请输出”-1“。 人选反馈：面试官会抓住一个点一直追问，问的比较细。 头条人选二（两周前面试 paas 平台开发工程师） 一面 1.字符串原地反转 2.软连接和硬连接的区别 3.前序和中序构造二叉树 4.10 亿个数字排序 5.大型企业的上线流程 二面 连续子数组的最大和 链表回文 三面 基于人选项目去发问，偏业务，没有算法题，还问到一些开源组件的使用情况。 头条人选三（面试基础架构部门容器岗位） 1. 系统 （Linux 下面进程是如何调度的，进程的优先级），有没有遇到过问题，描述原因和解决方法 2.网络 TIME_WAIT 状态出现的原因，排查的思路，有没有调优的方法 2. 数据库 MyISAM 和 InnoDB 的简单区别 3. Docker/K8s CGroup 如何做 cpu 的资源限制，哪几种限制方式 K8s 中的 request 和 limit 是如何实现的 K8s 中的 rc、rs、deployment 的区别，特点 5.</description>
    </item>
    
    <item>
      <title>KubeDNS</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/arch/network/dns/kubedns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/arch/network/dns/kubedns/</guid>
      <description>KubeDNS #  在 Linux 系统中，/etc/resolv.conf 是存储 DNS 服务器的文件， 普通 Pod 的 /etc/resolv.conf 文件应该存储的是 kube-dns 的 Service IP。
nameserver 10.99.0.2 # 这里存储的是kube-dns的Service IP search default.svc.cluster.local. svc.cluster.local. cluster.local. options ndots:5 如何进入 kube-dns 容器进行抓包 #  DNS 容器往往不具备 bash，所以不能通过 docker exec 或者 kubectl exec 的方式进入容器抓包。
docker inspect --format &amp;quot;{{.State.Pid}}&amp;quot; dns_container_id # 进入 container 的 network namespace nsenter -n -t pid # 对 53 端口进行抓包 tcpdump -i eth0 -N udp dst port 53 dnsPolicy #  ClusterFirst（默认） #  优先使用 kubedns 或者 coredns 进行域名解析。如果解析不成功，才会使用宿主机的 DNS 配置进行解析。</description>
    </item>
    
    <item>
      <title>Operator</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/concept/resource/operator/</guid>
      <description>Operator #  Operator 的工作原理 #  利用了 Kubernetes 的自定义 API 资源（CRD），来描述我们想要部署的 “有状态应用”； 然后在自定义控制器里，根据自定义 API 对象的变化，来完成具体的部署和运维工作。
所以，编写一个 Etcd Operator，与我们前面编写一个自定义控制器的过程，没什么不同。
 Operator 开发 #  kubebuilder #  kudobuilder/kudo #  GoogleCloudPlatform/metacontroller #  Lightweight Kubernetes controllers as a service https://metacontroller.app/
可与 Webhook 结合使用，以实现自己的功能。
operator-framework/operator-sdk #  SDK for building Kubernetes applications. Provides high level APIs, useful abstractions, and project scaffolding. https://sdk.operatorframework.io
Operator 框架
operator-framework/getting-started #   operator-framework/operator-lifecycle-manager #  A management framework for extending Kubernetes with Operators</description>
    </item>
    
    <item>
      <title>架构</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/arch/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/arch/architecture/</guid>
      <description>Kubernetes 架构 #  </description>
    </item>
    
    <item>
      <title>4.3 关注项目</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/appendix/attention/</guid>
      <description>Kubernetes 关注项目 #  kubernetes 官方 #  kubernetes/kubernetes #  Production-Grade Container Scheduling and Management https://kubernetes.io
kubernetes/client-go #  Go client for Kubernetes.
kubernetes/kops #  kops - Kubernetes Operations The easiest way to get a production grade Kubernetes cluster up and running.
kubernetes/dashboard #  General-purpose web UI for Kubernetes clusters
kubernetes/kube-state-metrics #  Add-on agent to generate and expose cluster-level metrics.
kubernetes/examples #  Kubernetes application example tutorials</description>
    </item>
    
    <item>
      <title>OperatorHub</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/code/crd/operator/operatorhub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/code/crd/operator/operatorhub/</guid>
      <description>OperatorHub #  https://operatorhub.io/</description>
    </item>
    
    <item>
      <title>client-go</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/other/client-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/other/client-go/</guid>
      <description>kubernetes/client-go #  安装 #  </description>
    </item>
    
    <item>
      <title>Horizontal Pod Autoscaler</title>
      <link>https://ikingye.github.io/study-kubernetes/docs/basic/other/practice/hpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-kubernetes/docs/basic/other/practice/hpa/</guid>
      <description>Horizontal Pod Autoscaler #  Pod 水平自动伸缩</description>
    </item>
    
  </channel>
</rss>