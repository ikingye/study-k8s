<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on Kubernetes 学习笔记</title>
    <link>https://ikingye.github.io/study-k8s/</link>
    <description>Recent content in 首页 on Kubernetes 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-k8s/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>alpine</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/container/docker/image/alpine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/container/docker/image/alpine/</guid>
      <description>alpine 安装 telnet apk add busybox-extras</description>
    </item>
    
    <item>
      <title>K8s 端口</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/network/port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/network/port/</guid>
      <description>K8s 端口  service 的端口  port：负责处理对内的通信，  访问方式：clusterIP:port   nodePort：在 node 上，负责对外通信  访问方式：NodeIP:NodePort     pod 的端口  targetPort：在 pod 上  从 port 和 nodePort 上来的流量，经过 kube-proxy 流入到后端 pod 的 targetPort 上，最后进入容器     容器的端口  containerPort：在容器上，用于被 pod 绑定   主机的端口  hostPort：容器暴露的端口映射到的主机端口  尽量不要为 Pod 指定 hostPort 将 Pod 绑定到 hostPort 时，它会限制 Pod 可以调度的位置数，因为每个 &amp;lt;hostIP, hostPort, protocol&amp;gt; 组合必须是唯一的 如果您没有明确指定 hostIP 和 protocol，Kubernetes 将使用 0.</description>
    </item>
    
    <item>
      <title>KubeDNS</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/network/kubedns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/network/kubedns/</guid>
      <description>KubeDNS 在 Linux 系统中，/etc/resolv.conf 是存储 DNS 服务器的文件， 普通 Pod 的 /etc/resolv.conf 文件应该存储的是 kube-dns 的 Service IP。
nameserver 10.99.0.2 # 这里存储的是kube-dns的Service IP search default.svc.cluster.local. svc.cluster.local. cluster.local. options ndots:5 k8s 中域名是如何被解析的 在 k8s 中，一个 Pod 如果要访问相同同 Namespace 下的 Service（比如 user-svc），那么只需要 curl user-svc。 如果 Pod 和 Service 不在同一域名下，那么就需要在 Service Name 之后添加上 Service 所在的 Namespace（比如 beta），curl user-svc.beta。 那么 k8s 是如何知道这些域名是内部域名并为他们做解析的呢？
无论是在 宿主机 或者是在 k8s 集群中，DNS 解析会依赖这个三个文件
 /etc/host.conf /etc/hosts /etc/resolv.conf  /etc/resolv.conf resolv.conf 是 Pod 在 dnsPolicy: ClusterFirst 的情况下，k8s 为其自动生成的。 在该 Pod 内请求的所有的域名解析都需要经过 DNS Service 进行解析，不管是集群内部域名还是外部域名。</description>
    </item>
    
    <item>
      <title>Pod</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/resource/pod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/resource/pod/</guid>
      <description>Pod Infra 容器 使用镜像：k8s.gcr.io/pause
这个镜像是一个用汇编语言编写的、永远处于 “暂停” 状态的容器，解压后的大小也只有 100~200 KB 左右。
Init 容器 以 Init: 开始的 Pod 状态概括表示 Init 容器的执行状态。
下表展示了在调试 Init 容器时可能见到的状态值。
   状态 含义     Init:N/M Pod 中有 M 个 Init 容器，其中 M 已经完成   Init:Error Init 容器执行错误   Init:CrashLoopBackOff Init 容器已经失败多次   Pending Pod 还没有开始执行 Init 容器   PodInitializing or Running Pod 已经完成执行 Init 容器    Pod phase（运行阶段） Pod 的 status 定义在 PodStatus 对象中，其中有一个 Phase（运行阶段） 字段。</description>
    </item>
    
    <item>
      <title>安装</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/quick-start/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/quick-start/install/</guid>
      <description>Kubernetes 安装 安装方式对比 MacOS  Minikube  Pros:  Mature solution Works on Windows (any version and edition), Mac and Linux Multiple drivers that can match any environment Installs several plugins (such as dashboard) by default Very flexible on installation requirements and upgrades  Cons:  Installation and removal not as streamlined as other solutions Does not integrate into the MacOS UI  Docker Desktop Pros:  Very easy installation for beginners All-in-one Docker and Kubernetes solution Configurable via UI  Cons:  Relatively new, possibly unstable Limited configuration options (i.</description>
    </item>
    
    <item>
      <title>教程</title>
      <link>https://ikingye.github.io/study-k8s/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/appendix/tutorial/</guid>
      <description>Kubernetes 教程 基础 collabnix/dockerlabs  Docker - Beginners | Intermediate | Advanced https://dockerlabs.collabnix.com
To get started with Kubernetes, follow the below steps:
Open https://labs.play-with-kubernetes.com on your browser Click on Add Instances to setup first k8s node cluster
feiskyer/kubernetes-handbook  Kubernetes Handbook （Kubernetes 指南） https://kubernetes.feisky.xyz
play-with-docker/play-with-docker  Play With Docker gives you the experience of having a free Alpine Linux Virtual Machine in the cloud where you can build and run Docker containers and even create clusters with Docker features like Swarm Mode.</description>
    </item>
    
    <item>
      <title>ConfigMap</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/resource/configmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/resource/configmap/</guid>
      <description>ConfigMap 基础 ConfigMap 在运行时会将配置文件、命令行参数、环境变量、端口号以及其他配置工件绑定到 Pod 的容器和系统组件。借助 ConfigMap，您可以将配置与 Pod 和组件分开，这有助于保持工作负载的可移植性，使其配置更易于更改和管理，并防止将配置数据硬编码到 Pod 规范。
ConfigMap 可用于存储和共享非敏感、未加密的配置信息。要在集群中使用敏感信息，您必须使用 Secret。
创建 ConfigMap 使用以下命令创建 ConfigMap：
kubectl create configmap [NAME] [DATA]
[DATA] 可以是： 包含一个或多个配置文件的目录的路径，使用 &amp;ndash;from-file 标志指示 键值对，每个键值对都使用 &amp;ndash;from-literal 标志指定 如需详细了解 kubectl create，请参阅参考文档。
您还可以通过在 YAML 清单文件中定义 ConfigMap 对象并使用 kubectl create -f [FILE] 部署对象来创建 ConfigMap。
使用 ConfigMap apiVersion: v1 kind: Pod metadata: name: dapi-test-pod spec: containers: - name: test-container image: k8s.gcr.io/busybox command: [ &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)&amp;#34; ] env: - name: SPECIAL_LEVEL_KEY valueFrom: configMapKeyRef: name: special-config key: SPECIAL_LEVEL - name: SPECIAL_TYPE_KEY valueFrom: configMapKeyRef: name: special-config key: SPECIAL_TYPE restartPolicy: Never </description>
    </item>
    
    <item>
      <title>CoreDNS</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/network/coredns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/network/coredns/</guid>
      <description>CoreDNS CoreDNS vs KubeDNS 在 kube-dns 中，一个 pod 内使用了数个容器：kubedns、dnsmasq 和 sidecar。
 kubedns 容器监视 Kubernetes API 并基于 Kubernetes DNS 规范提供 DNS 记录， dnsmasq 提供缓存和存根域支持， sidecar 提供指标和健康检查。  此设置会导致一些问题随着时间的推移而出现。首先，dnsmasq 中的安全漏洞导致过去需要发布 Kubernetes 安全补丁。 此外，由于 dnsmasq 处理存根域，但 kubedns 处理 External Services，因此你无法在外部服务中使用存根域，这非常限制该功能（参阅 dns＃131）。
在 CoreDNS 中，所有这些功能都在一个容器中完成 —— 该容器运行用 Go 编写的进程。 启用的不同插件来复制（并增强）kube-dns 中的功能。</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/resource/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/resource/deployment/</guid>
      <description>Deployment </description>
    </item>
    
    <item>
      <title>Kubectl</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/kubectl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/kubectl/</guid>
      <description>Kubectl 集群信息查询  kubectl cluster-info  node  kubectl get nodes kubectl describe node   常用操作 获取 service ip, port kubectl get service/servicename -o jsonpath=&#39;{.spec.clusterIP}:{.spec.ports[*].port}&#39;  参考 kubectl Cheat Sheet </description>
    </item>
    
    <item>
      <title>基础</title>
      <link>https://ikingye.github.io/study-k8s/docs/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/appendix/interview/basic/</guid>
      <description>Kubernetes 基础面试题 </description>
    </item>
    
    <item>
      <title>进阶</title>
      <link>https://ikingye.github.io/study-k8s/docs/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/appendix/interview/advanced/</guid>
      <description>Kubernetes 进阶面试题 </description>
    </item>
    
    <item>
      <title>CRD</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/resource/crd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/resource/crd/</guid>
      <description>CRD </description>
    </item>
    
    <item>
      <title>高阶</title>
      <link>https://ikingye.github.io/study-k8s/docs/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/appendix/interview/expert/</guid>
      <description>Kubernetes 高阶面试题 </description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/resource/service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/resource/service/</guid>
      <description>Service type ClusterIP  通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问 这也是默认的 ServiceType  NodePort  通过每个 Node 上的 IP 和静态端口（NodePort）暴露服务 NodePort 服务会路由到 ClusterIP 服务，这个 ClusterIP 服务会自动创建 通过请求 &amp;lt;NodeIP&amp;gt;:&amp;lt;NodePort&amp;gt;，可以从集群的外部访问一个 NodePort 服务  LoadBalancer  使用云提供商的负载局衡器，可以向外部暴露服务 外部的负载均衡器可以路由到 NodePort 服务和 ClusterIP 服务  ExternalName  通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容（例如， foo.bar.example.com） 没有任何类型代理被创建 CoreDNS 1.7 或更高版本才能使用 ExternalName 类型  </description>
    </item>
    
    <item>
      <title>关注</title>
      <link>https://ikingye.github.io/study-k8s/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/appendix/attention/</guid>
      <description>关注 kubernetes/kubernetes  Production-Grade Container Scheduling and Management https://kubernetes.io
安装 kubernetes kubernetes/minikube  Run Kubernetes locally https://minikube.sigs.k8s.io
一般用于本地开发、测试和学习，不能用于生产环境
kubernetes/kubeadm   用于快速搭建 kubernetes 集群，目前应该是比较方便和推荐的，简单易用 kubeadm 是 Kubernetes 1.4 开始新增的特性 kubeadm init 以及 kubeadm join 这两个命令可以快速创建 kubernetes 集群  ubuntu/microk8s  MicroK8s is a small, fast, single-package Kubernetes for developers, IoT and edge. https://microk8s.io
Kubernetes 周边工具 rancher/rancher  Rancher 是一个容器管理平台，通过 Rancher 可以实现 Docker 和 Kubernetes 的轻松部署。
helm/helm  The Kubernetes Package Manager https://helm.</description>
    </item>
    
    <item>
      <title>关注</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/container/docker/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/container/docker/attention/</guid>
      <description>关注 moby/moby  Moby Project - a collaborative project for the container ecosystem to assemble container-based systems https://mobyproject.org/
docker/docker-ce  Docker CE https://www.docker.com/community-edition
play-with-docker/play-with-docker  Play With Docker gives you the experience of having a free Alpine Linux Virtual Machine in the cloud where you can build and run Docker containers and even create clusters with Docker features like Swarm Mode.
Under the hood DIND or Docker-in-Docker is used to give the effect of multiple VMs/PCs.</description>
    </item>
    
    <item>
      <title>Docker 教程</title>
      <link>https://ikingye.github.io/study-k8s/docs/basic/container/docker/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-k8s/docs/basic/container/docker/tutorial/</guid>
      <description>Docker 教程 play-with-docker/play-with-docker  Play With Docker gives you the experience of having a free Alpine Linux Virtual Machine in the cloud where you can build and run Docker containers and even create clusters with Docker features like Swarm Mode.
Under the hood DIND or Docker-in-Docker is used to give the effect of multiple VMs/PCs.
A live version is available at: http://play-with-docker.com/</description>
    </item>
    
  </channel>
</rss>